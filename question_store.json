{
    "level1": {
        "bush1": {
            "instructions": "Create a variable 'age' with the value 25 and print it.",
            "pre_code": "age = 25\nprint(  )",
            "expected_output": "25"
        },
        "bush2": {
            "instructions": "Print the type of the value 'Hello' using the type() function.",
            "pre_code": "value = 'Hello'\nprint(  )",
            "expected_output": "<class 'str'>"
        },
        "bush3": {
            "instructions": "Create a variable 'price' with the value 19.99 and print it.",
            "pre_code": "price = 19.99\nprint(  )",
            "expected_output": "19.99"
        },
        "bush4": {
            "instructions": "Print the result of 10 divided by 3.",
            "pre_code": "result = 10 / 3\nprint(  )",
            "expected_output": "3.3333333333333335"
        },
        "bush5": {
            "instructions": "Create a variable 'is_student' with the value True and print it.",
            "pre_code": "is_student = True\nprint(  )",
            "expected_output": "True"
        }
    },
    "level2": {
        "bush1": {
            "instructions": "Print the sum of 5 and 3.14.",
            "pre_code": "result = 5 + 3.14\nprint(  )",
            "expected_output": "8.14"
        },
        "bush2": {
            "instructions": "Convert the integer 10 to a float and print it.",
            "pre_code": "number = float(10)\nprint(  )",
            "expected_output": "10.0"
        },
        "bush3": {
            "instructions": "Convert the string '100' to an integer and print it.",
            "pre_code": "number = int('100')\nprint(  )",
            "expected_output": "100"
        },
        "bush4": {
            "instructions": "Convert the float 3.14 to a string and print it.",
            "pre_code": "text = str(3.14)\nprint(  )",
            "expected_output": "3.14"
        },
        "bush5": {
            "instructions": "Convert the boolean True to an integer and print it.",
            "pre_code": "number = int(True)\nprint(  )",
            "expected_output": "1"
        }
    },
    "level3": {
        "bush1": {
            "instructions": "Print the length of the string 'Python'.",
            "pre_code": "text = 'Python'\nprint(  )",
            "expected_output": "6"
        },
        "bush2": {
            "instructions": "Print the first character of the string 'Hello'.",
            "pre_code": "text = 'Hello'\nprint(  )",
            "expected_output": "H"
        },
        "bush3": {
            "instructions": "Print the last character of the string 'World'.",
            "pre_code": "text = 'World'\nprint(  )",
            "expected_output": "d"
        },
        "bush4": {
            "instructions": "Print the substring 'ell' from the string 'Hello'.",
            "pre_code": "text = 'Hello'\nprint(  )",
            "expected_output": "ell"
        },
        "bush5": {
            "instructions": "Print the result of concatenating 'Hello' and 'World'.",
            "pre_code": "text1 = 'Hello'\ntext2 = 'World'\nprint(  )",
            "expected_output": "HelloWorld"
        }
    },
    "level4": {
        "bush1": {
            "instructions": "Print the result of the expression 5 > 3.",
            "pre_code": "result = 5 > 3\nprint(  )",
            "expected_output": "True"
        },
        "bush2": {
            "instructions": "Print the result of the expression 10 == 10.",
            "pre_code": "result = 10 == 10\nprint(  )",
            "expected_output": "True"
        },
        "bush3": {
            "instructions": "Print the result of the expression 7 < 5.",
            "pre_code": "result = 7 < 5\nprint(  )",
            "expected_output": "False"
        },
        "bush4": {
            "instructions": "Print the result of the expression 'apple' != 'orange'.",
            "pre_code": "result = 'apple' != 'orange'\nprint(  )",
            "expected_output": "True"
        },
        "bush5": {
            "instructions": "Print the result of the expression not (10 > 5).",
            "pre_code": "result = not (10 > 5)\nprint(  )",
            "expected_output": "False"
        }
    },
    "level5": {
        "bush1": {
            "instructions": "Print the result of adding 5 and 3.",
            "pre_code": "result = 5 + 3\nprint(  )",
            "expected_output": "8"
        },
        "bush2": {
            "instructions": "Print the result of subtracting 10 from 20.",
            "pre_code": "result = 20 - 10\nprint(  )",
            "expected_output": "10"
        },
        "bush3": {
            "instructions": "Print the result of multiplying 4 by 7.",
            "pre_code": "result = 4 * 7\nprint(  )",
            "expected_output": "28"
        },
        "bush4": {
            "instructions": "Print the result of dividing 15 by 3.",
            "pre_code": "result = 15 / 3\nprint(  )",
            "expected_output": "5.0"
        },
        "bush5": {
            "instructions": "Print the result of 2 raised to the power of 3.",
            "pre_code": "result = 2 ** 3\nprint(  )",
            "expected_output": "8"
        }
    },
    "level6": {
        "bush1": {
            "instructions": "Create a list of numbers from 1 to 5 and print it.",
            "pre_code": "numbers = [1, 2, 3, 4, 5]\nprint(  )",
            "expected_output": "[1, 2, 3, 4, 5]"
        },
        "bush2": {
            "instructions": "Print the second element of the list ['apple', 'banana', 'cherry'].",
            "pre_code": "fruits = ['apple', 'banana', 'cherry']\nprint(  )",
            "expected_output": "banana"
        },
        "bush3": {
            "instructions": "Add 'orange' to the list ['apple', 'banana', 'cherry'] and print the updated list.",
            "pre_code": "fruits = ['apple', 'banana', 'cherry']\nfruits.append('orange')\nprint(  )",
            "expected_output": "['apple', 'banana', 'cherry', 'orange']"
        },
        "bush4": {
            "instructions": "Remove 'banana' from the list ['apple', 'banana', 'cherry'] and print the updated list.",
            "pre_code": "fruits = ['apple', 'banana', 'cherry']\nfruits.remove('banana')\nprint(  )",
            "expected_output": "['apple', 'cherry']"
        },
        "bush5": {
            "instructions": "Print the length of the list [10, 20, 30, 40, 50].",
            "pre_code": "numbers = [10, 20, 30, 40, 50]\nprint(  )",
            "expected_output": "5"
        }
    },
    "level7": {
        "bush1": {
            "instructions": "Create a tuple with elements 1, 2, 3 and print it.",
            "pre_code": "my_tuple = (1, 2, 3)\nprint(  )",
            "expected_output": "(1, 2, 3)"
        },
        "bush2": {
            "instructions": "Print the first element of the tuple ('apple', 'banana', 'cherry').",
            "pre_code": "fruits = ('apple', 'banana', 'cherry')\nprint(  )",
            "expected_output": "apple"
        },
        "bush3": {
            "instructions": "Convert the list [1, 2, 3] to a tuple and print it.",
            "pre_code": "my_list = [1, 2, 3]\nmy_tuple = tuple(my_list)\nprint(  )",
            "expected_output": "(1, 2, 3)"
        },
        "bush4": {
            "instructions": "Print the length of the tuple (10, 20, 30, 40).",
            "pre_code": "numbers = (10, 20, 30, 40)\nprint(  )",
            "expected_output": "4"
        },
        "bush5": {
            "instructions": "Check if the value 5 is in the tuple (1, 2, 3, 4, 5) and print the result.",
            "pre_code": "numbers = (1, 2, 3, 4, 5)\nprint(  )",
            "expected_output": "True"
        }
    },
    "level8": {
        "bush1": {
            "instructions": "Create a set with elements 1, 2, 3 and print it.",
            "pre_code": "my_set = {1, 2, 3}\nprint(  )",
            "expected_output": "{1, 2, 3}"
        },
        "bush2": {
            "instructions": "Add the element 4 to the set {1, 2, 3} and print the updated set.",
            "pre_code": "my_set = {1, 2, 3}\nmy_set.add(4)\nprint(  )",
            "expected_output": "{1, 2, 3, 4}"
        },
        "bush3": {
            "instructions": "Remove the element 2 from the set {1, 2, 3} and print the updated set.",
            "pre_code": "my_set = {1, 2, 3}\nmy_set.remove(2)\nprint(  )",
            "expected_output": "{1, 3}"
        },
        "bush4": {
            "instructions": "Print the length of the set {10, 20, 30, 40}.",
            "pre_code": "numbers = {10, 20, 30, 40}\nprint(  )",
            "expected_output": "4"
        },
        "bush5": {
            "instructions": "Check if the value 5 is in the set {1, 2, 3, 4} and print the result.",
            "pre_code": "numbers = {1, 2, 3, 4}\nprint(  )",
            "expected_output": "False"
        }
    },
    "level9": {
        "bush1": {
            "instructions": "Create a dictionary with keys 'a', 'b', 'c' and values 1, 2, 3, and print it.",
            "pre_code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(  )",
            "expected_output": "{'a': 1, 'b': 2, 'c': 3}"
        },
        "bush2": {
            "instructions": "Print the value associated with the key 'b' in the dictionary {'a': 1, 'b': 2, 'c': 3}.",
            "pre_code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(  )",
            "expected_output": "2"
        },
        "bush3": {
            "instructions": "Add a new key-value pair 'd': 4 to the dictionary {'a': 1, 'b': 2, 'c': 3} and print the updated dictionary.",
            "pre_code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nmy_dict['d'] = 4\nprint(  )",
            "expected_output": "{'a': 1, 'b': 2, 'c': 3, 'd': 4}"
        },
        "bush4": {
            "instructions": "Remove the key 'b' from the dictionary {'a': 1, 'b': 2, 'c': 3} and print the updated dictionary.",
            "pre_code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['b']\nprint(  )",
            "expected_output": "{'a': 1, 'c': 3}"
        },
        "bush5": {
            "instructions": "Print the length of the dictionary {'a': 1, 'b': 2, 'c': 3, 'd': 4}.",
            "pre_code": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(  )",
            "expected_output": "4"
        }
    },
    "level10": {
        "bush1": {
            "instructions": "Write a function that takes a number and returns its square. Call it with 5.",
            "pre_code": "def square(n):\n    # Your code here\n    pass\n\nprint(square(5))",
            "expected_output": "25"
        },
        "bush2": {
            "instructions": "Write a function that takes two numbers and returns their sum. Call it with 3 and 4.",
            "pre_code": "def add(a, b):\n    # Your code here\n    pass\n\nprint(add(3, 4))",
            "expected_output": "7"
        },
        "bush3": {
            "instructions": "Write a function that takes a list and returns its length. Call it with [1, 2, 3, 4].",
            "pre_code": "def get_length(lst):\n    # Your code here\n    pass\n\nprint(get_length([1, 2, 3, 4]))",
            "expected_output": "4"
        },
        "bush4": {
            "instructions": "Write a function that takes a string and returns it in uppercase. Call it with 'hello'.",
            "pre_code": "def to_uppercase(s):\n    # Your code here\n    pass\n\nprint(to_uppercase('hello'))",
            "expected_output": "HELLO"
        },
        "bush5": {
            "instructions": "Write a function that takes a number and returns True if it's even, otherwise False. Call it with 6.",
            "pre_code": "def is_even(n):\n    # Your code here\n    pass\n\nprint(is_even(6))",
            "expected_output": "True"
        }
    },
    "level11": {
        "bush1": {
            "instructions": "Write a Python function that takes a list of numbers as input and returns the largest number in the list.",
            "pre_code": "def find_largest(numbers):\n    # your code here\n",
            "expected_output": "find_largest([1, 5, 8, 3, 9]) should return 9"
        },
        "bush2": {
            "instructions": "Write a Python function that takes a string as input and returns the string with all vowels removed.",
            "pre_code": "def remove_vowels(word):\n    # your code here\n",
            "expected_output": "remove_vowels('hello') should return 'hll'"
        },
        "bush3": {
            "instructions": "Write a Python function that takes two lists of numbers as input and returns a new list that contains the elements that are common to both lists.",
            "pre_code": "def common_elements(list1, list2):\n    # your code here\n",
            "expected_output": "common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) should return [3, 4, 5]"
        },
        "bush4": {
            "instructions": "Write a Python function that takes a list of strings as input and returns a new list that contains the strings in reverse order.",
            "pre_code": "def reverse_list(strings):\n    # your code here\n",
            "expected_output": "reverse_list(['apple', 'banana', 'cherry']) should return ['cherry', 'banana', 'apple']"
        },
        "bush5": {
            "instructions": "Write a Python function that takes a dictionary as input and returns a new dictionary with the keys and values swapped.",
            "pre_code": "def swap_keys_values(dictionary):\n    # your code here\n",
            "expected_output": "swap_keys_values({'a': 1, 'b': 2, 'c': 3}) should return {1: 'a', 2: 'b', 3: 'c'}"
        }
    },
    "level12": {
        "bush1": {
            "instructions": "Write a Python function that takes a list of numbers as input and returns the second largest number in the list. If the list has less than two elements, the function should return None.",
            "pre_code": "def second_largest(numbers):\n    # your code here\n",
            "expected_output": "second_largest([1, 5, 8, 3, 9]) should return 8"
        },
        "bush2": {
            "instructions": "Write a Python function that takes a list of strings as input and returns the longest string in the list. If there are multiple strings of the same longest length, the function should return the first one.",
            "pre_code": "def longest_string(strings):\n    # your code here\n",
            "expected_output": "longest_string(['apple', 'banana', 'cherry', 'blueberry']) should return 'blueberry'"
        },
        "bush3": {
            "instructions": "Write a Python function that takes a string as input and returns a new string with the words in the original string reversed. For example, the function should turn 'hello world' into 'world hello'.",
            "pre_code": "def reverse_words(sentence):\n    # your code here\n",
            "expected_output": "reverse_words('hello world') should return 'world hello'"
        },
        "bush4": {
            "instructions": "Write a Python function that takes a list of numbers as input and returns a new list with the elements in reverse order. The function should handle both lists of numbers and lists of negative numbers correctly.",
            "pre_code": "def reverse_list_of_numbers(numbers):\n    # your code here\n",
            "expected_output": "reverse_list_of_numbers([1, 2, 3]) should return [3, 2, 1]; reverse_list_of_numbers([-1, -2, -3]) should return [-3, -2, -1]"
        },
        "bush5": {
            "instructions": "Write a Python function that takes a list of dictionaries as input and returns a new list with the dictionaries sorted by the value of a specified key. For example, if the input list is [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 20}, {'name': 'Charlie', 'age': 22}], the function should return [{'name': 'Bob', 'age': 20}, {'name': 'Charlie', 'age': 22}, {'name': 'Alice', 'age': 25}] when the key is 'age'.",
            "pre_code": "def sort_dicts_by_key(dicts, key):\n    # your code here\n",
            "expected_output": "sort_dicts_by_key([{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 20}, {'name': 'Charlie', 'age': 22}], 'age') should return [{'name': 'Bob', 'age': 20}, {'name': 'Charlie', 'age': 22}, {'name': 'Alice', 'age': 25}]"
        }
    }
}